// The code snippet provided is a Java program that reads an integer `n` and an array of `n` integers from the user input. The program then generates and prints all prefix combinations of the array elements up to the current index, separated by commas.

// ### Problem Description
// Write a program that:
// 1. Reads an integer `n` from the user input, which indicates the number of elements in the array.
// 2. Reads `n` integers, which form the array elements.
// 3. For each element in the array, prints all the elements from the beginning of the array up to that element, separated by a comma.

// **Input Format:**
// - The first input is an integer `n`, the number of elements in the array.
// - The next `n` integers are the elements of the array.

// **Output Format:**
// - For each element in the array, print all the elements from the beginning of the array up to that element as a prefix, with each prefix combination separated by commas.

// **Example:**

// **Input:**
// ```
// 4 1 2 3 4
// ```

// **Output:**
// ```
// 1, 12, 123, 1234
// ```

// In this example, the input `4 1 2 3 4` means there are 4 elements in the array: `1`, `2`, `3`, and `4`. The output shows the prefixes of the array: `1`, `12`, `123`, and `1234`. Each prefix is generated by appending elements from the start up to the current index.



import java.util.Scanner;

public class AllCombination {
 public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
        String input = scanner.nextLine();

        String[] ele=input.split(" ");
        int n=Integer.parseInt(ele[0]);

        int [] arr=new int[n];

        for (int i = 0; i < n; i++) {
            arr[i]=Integer.parseInt(ele[i+1]);
        }

        for(int i=0;i<n;i++){
            StringBuilder sb =new StringBuilder();
            for (int j = 0; j <=i; j++) {
                sb.append(arr[j]);
            }
            if (i != n - 1) {
                sb.append(", ");
            }
            System.out.print(sb.toString());
        }
      
 }   
}

